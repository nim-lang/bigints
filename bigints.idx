BigInt	bigints.html#BigInt	bigints: BigInt	
initBigInt	bigints.html#initBigInt,sinkseq[uint32]	bigints: initBigInt(vals: sink seq[uint32]; isNegative = false): BigInt	
initBigInt	bigints.html#initBigInt,T	bigints: initBigInt[T: int8 | int16 | int32](val: T): BigInt	
initBigInt	bigints.html#initBigInt,T_2	bigints: initBigInt[T: uint8 | uint16 | uint32](val: T): BigInt	
initBigInt	bigints.html#initBigInt,int64	bigints: initBigInt(val: int64): BigInt	
initBigInt	bigints.html#initBigInt,uint64	bigints: initBigInt(val: uint64): BigInt	
initBigInt	bigints.html#initBigInt.t,int	bigints: initBigInt(val: int): BigInt	
initBigInt	bigints.html#initBigInt.t,uint	bigints: initBigInt(val: uint): BigInt	
initBigInt	bigints.html#initBigInt,BigInt	bigints: initBigInt(val: BigInt): BigInt	
abs	bigints.html#abs,BigInt	bigints: abs(a: BigInt): BigInt	
`==`	bigints.html#==,BigInt,BigInt	bigints: `==`(a, b: BigInt): bool	
`&lt;`	bigints.html#<,BigInt,BigInt	bigints: `&lt;`(a, b: BigInt): bool	
`&lt;=`	bigints.html#<=,BigInt,BigInt	bigints: `&lt;=`(a, b: BigInt): bool	
`-`	bigints.html#-,BigInt	bigints: `-`(a: BigInt): BigInt	
`+`	bigints.html#+,BigInt,BigInt	bigints: `+`(a, b: BigInt): BigInt	
`+=`	bigints.html#+=.t,BigInt,BigInt	bigints: `+=`(a: var BigInt; b: BigInt)	
`-`	bigints.html#-,BigInt,BigInt	bigints: `-`(a, b: BigInt): BigInt	
`-=`	bigints.html#-=.t,BigInt,BigInt	bigints: `-=`(a: var BigInt; b: BigInt)	
`*`	bigints.html#*,BigInt,BigInt	bigints: `*`(a, b: BigInt): BigInt	
`*=`	bigints.html#*=.t,BigInt,BigInt	bigints: `*=`(a: var BigInt; b: BigInt)	
pow	bigints.html#pow,BigInt,Natural	bigints: pow(x: BigInt; y: Natural): BigInt	
`shl`	bigints.html#shl,BigInt,Natural	bigints: `shl`(x: BigInt; y: Natural): BigInt	
`shr`	bigints.html#shr,BigInt,Natural	bigints: `shr`(x: BigInt; y: Natural): BigInt	
`not`	bigints.html#not,BigInt	bigints: `not`(a: BigInt): BigInt	
`and`	bigints.html#and,BigInt,BigInt	bigints: `and`(a, b: BigInt): BigInt	
`or`	bigints.html#or,BigInt,BigInt	bigints: `or`(a, b: BigInt): BigInt	
`xor`	bigints.html#xor,BigInt,BigInt	bigints: `xor`(a, b: BigInt): BigInt	
`div`	bigints.html#div,BigInt,BigInt	bigints: `div`(a, b: BigInt): BigInt	
`mod`	bigints.html#mod,BigInt,BigInt	bigints: `mod`(a, b: BigInt): BigInt	
divmod	bigints.html#divmod,BigInt,BigInt	bigints: divmod(a, b: BigInt): tuple[q, r: BigInt]	
gcd	bigints.html#gcd,BigInt,BigInt	bigints: gcd(a, b: BigInt): BigInt	
toInt	bigints.html#toInt,BigInt	bigints: toInt[T: SomeInteger](x: BigInt): Option[T]	
toString	bigints.html#toString,BigInt,range[]	bigints: toString(a: BigInt; base: range[2 .. 36] = 10): string	
`$`	bigints.html#$,BigInt	bigints: `$`(a: BigInt): string	
initBigInt	bigints.html#initBigInt,string,range[]	bigints: initBigInt(str: string; base: range[2 .. 36] = 10): BigInt	
`'bi`	bigints.html#'bi,string	bigints: `&apos;bi`(s: string): BigInt	
inc	bigints.html#inc,BigInt,int	bigints: inc(a: var BigInt; b: int = 1)	
dec	bigints.html#dec,BigInt,int	bigints: dec(a: var BigInt; b: int = 1)	
succ	bigints.html#succ,BigInt,int	bigints: succ(a: BigInt; b: int = 1): BigInt	
pred	bigints.html#pred,BigInt,int	bigints: pred(a: BigInt; b: int = 1): BigInt	
countup	bigints.html#countup.i,BigInt,BigInt,int32	bigints: countup(a, b: BigInt; step: int32 = 1): BigInt	
countdown	bigints.html#countdown.i,BigInt,BigInt,int32	bigints: countdown(a, b: BigInt; step: int32 = 1): BigInt	
`..`	bigints.html#...i,BigInt,BigInt	bigints: `..`(a, b: BigInt): BigInt	
`..&lt;`	bigints.html#..<.i,BigInt,BigInt	bigints: `..&lt;`(a, b: BigInt): BigInt	
fastLog2	bigints.html#fastLog2,BigInt	bigints: fastLog2(a: BigInt): int	
invmod	bigints.html#invmod,BigInt,BigInt	bigints: invmod(a, modulus: BigInt): BigInt	
powmod	bigints.html#powmod,BigInt,BigInt,BigInt	bigints: powmod(base, exponent, modulus: BigInt): BigInt	
